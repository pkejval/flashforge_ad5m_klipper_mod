name: Nightly firmware build

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Update submodules to latest remote commits
      run: |
        git submodule update --init --recursive --remote

    - name: Disable upstream duplicates of project-local Buildroot packages
      run: |
        PROJECT_PKGS_DIR="build_scripts/buildroot/package"
        UPSTREAM_PKGS_DIR="submodules/buildroot/package"
        CONFIG_IN="${UPSTREAM_PKGS_DIR}/Config.in"
        
        for pkg in $(find "$PROJECT_PKGS_DIR" -maxdepth 1 -mindepth 1 -type d -printf '%f\n'); do
          if [ -d "${UPSTREAM_PKGS_DIR}/${pkg}" ]; then
            echo "⚠️  Removing upstream duplicate of ${pkg}"
            rm -rf "${UPSTREAM_PKGS_DIR}/${pkg}"
            sed -i "/package\/${pkg//\//\\/}\/Config.in/s/^/#/" "$CONFIG_IN"
          fi
        done

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y git make gcc g++ libncurses-dev bc bison flex libssl-dev \
          libelf-dev python3 python3-pip python3-venv build-essential cmake unzip wget jq curl

    - name: Restore Buildroot sdk cache
      uses: actions/cache/restore@v4
      with:
        path: build_output/buildroot/sdk
        key: buildroot-host-${{ hashFiles('build_scripts/buildroot/.config') }}
        restore-keys: buildroot-host-

    - name: Build firmware (lite)
      run: |
        make lite

    - name: Save (update) Buildroot host cache
      if: always()
      uses: actions/cache/save@v4
      with:
        path: build_output/buildroot/sdk/host
        key: ${{ steps.br-host.outputs.cache-primary-key }}

    - name: Find firmware and compute hash
      id: firmware
      run: |
        mkdir build_hash
        FILE1=$(find build_output/packages -type f -name "Adventurer5M-KlipperMod-*.tgz" | head -n 1)
        FILE2=$(find build_output/packages -type f -name "Adventurer5MPro-KlipperMod-*.tgz" | head -n 1)
        echo "firmware1=$FILE1" >> $GITHUB_OUTPUT
        echo "firmware2=$FILE2" >> $GITHUB_OUTPUT
        sha256sum "$FILE1" > build_hash/firmware1.sha256
        sha256sum "$FILE2" > build_hash/firmware2.sha256

    - name: Get latest release firmware for comparison
      run: |
        mkdir previous || true
        gh release download --repo ${{ github.repository }} --pattern '*.tgz' --dir previous || true
        if compgen -G "previous/*.tgz" > /dev/null; then
          sha256sum previous/*.tgz > build_hash/previous.sha256
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Compare hashes
      id: compare
      run: |
        if [ -f build_hash/previous.sha256 ]; then
          cat build_hash/firmware1.sha256 build_hash/firmware2.sha256 > build_hash/current.sha256
          if diff -q build_hash/current.sha256 build_hash/previous.sha256 > /dev/null; then
            echo "NO_CHANGE=true" >> $GITHUB_ENV
          else
            echo "NO_CHANGE=false" >> $GITHUB_ENV
          fi
        else
          echo "NO_CHANGE=false" >> $GITHUB_ENV
        fi

    - name: Collect submodule versions
      if: env.NO_CHANGE == 'false'
      run: |
        echo "### Submodule versions" > release_notes.md
        git submodule status --recursive | \
        awk '{
            sub(/.*\//,"",$2);
            if (match($0,/\(([^)]+)\)/,v)) {
                gsub(/^remotes\/origin\//,"",v[1])
                printf "- %s (%s)\n", $2, v[1]
            }
        }' >> release_notes.md

    - name: Get today date
      id: date
      run: echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Create release if firmware changed
      if: env.NO_CHANGE == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.date.outputs.today }}
        name: ${{ steps.date.outputs.today }}
        body_path: release_notes.md
        files: |
          ${{ steps.firmware.outputs.firmware1 }}
          ${{ steps.firmware.outputs.firmware2 }}
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
